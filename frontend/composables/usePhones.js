// Mock data ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà Supabase ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° (‡πÉ‡∏ä‡πâ field names ‡πÉ‡∏´‡∏°‡πà)
const getMockData = () => [
  {
    id: '1',
    phone_number: '081-234-5678',
    carrier: 'AIS',
    category: '‡∏á‡∏≤‡∏ô',
    promotion: '‡πÄ‡∏ô‡πá‡∏ï 20GB',
    promotion_start_date: '2024-01-15',
    promotion_end_date: '2025-02-14',
    sim_expiry_date: '2025-01-15',
    status: 'active',
    notes: '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å',
    created_at: new Date().toISOString()
  },
  {
    id: '2',
    phone_number: '082-345-6789',
    carrier: 'DTAC',
    category: '‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß',
    promotion: '‡πÇ‡∏ó‡∏£‡πÑ‡∏°‡πà‡∏≠‡∏±‡πâ‡∏ô',
    promotion_start_date: '2024-12-28',
    promotion_end_date: '2025-01-27',
    sim_expiry_date: '2025-12-28',
    status: 'active',
    notes: '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏£‡∏≠‡∏á',
    created_at: new Date().toISOString()
  },
  {
    id: '3',
    phone_number: '083-456-7890',
    carrier: 'TRUE',
    category: '‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à',
    promotion: '‡πÄ‡∏ô‡πá‡∏ï 10GB',
    promotion_start_date: '2024-12-20',
    promotion_end_date: '2025-01-19',
    sim_expiry_date: '2025-12-20',
    status: 'active',
    notes: '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à',
    created_at: new Date().toISOString()
  },
  {
    id: '4',
    phone_number: '084-567-8901',
    carrier: 'NT',
    category: '‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß',
    promotion: '‡πÄ‡∏ô‡πá‡∏ï 5GB',
    promotion_start_date: '2024-12-25',
    promotion_end_date: '2025-01-24',
    sim_expiry_date: '2025-12-25',
    status: 'active',
    notes: '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÄ‡∏Å‡πà‡∏≤',
    created_at: new Date().toISOString()
  },
  {
    id: '5',
    phone_number: '085-678-9012',
    carrier: 'AIS',
    category: '‡∏á‡∏≤‡∏ô',
    promotion: '‡πÄ‡∏ô‡πá‡∏ï 50GB',
    promotion_start_date: '2024-12-30',
    promotion_end_date: '2025-01-29',
    sim_expiry_date: '2025-12-30',
    status: 'active',
    notes: '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà',
    created_at: new Date().toISOString()
  }
]

export const usePhones = () => {
  const { $supabase } = useNuxtApp()

  const phones = ref([])
  const loading = ref(false)
  const error = ref(null)

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Supabase client ‡πÉ‡∏´‡∏°‡πà‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ
  let supabaseClient = $supabase

  if (!supabaseClient) {
    console.warn('‚ö†Ô∏è Creating new Supabase client directly')
    try {
      // Import Supabase ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á client ‡πÉ‡∏´‡∏°‡πà
      const { createClient } = require('@supabase/supabase-js')
      supabaseClient = createClient(
        'https://shglsckgjpfjqbvythzz.supabase.co',
        'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNoZ2xzY2tnanBmanFidnl0aHp6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTg3ODQ4NzcsImV4cCI6MjA3NDM2MDg3N30.lRh2BCMvL68KCmNp4ZvXutIWFtGsYpLv8rcjlEhDWsQ'
      )
      console.log('‚úÖ Created Supabase client directly')
    } catch (importError) {
      console.error('‚ùå Failed to create Supabase client:', importError)

      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á client ‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ mock data
      phones.value = getMockData()
      return {
        phones: readonly(phones),
        loading: readonly(loading),
        error: readonly(error),
        fetchPhones: async () => {
          phones.value = getMockData()
          console.log('‚úÖ Using mock data fallback:', phones.value.length, 'phones')
        },
        addPhone: () => Promise.resolve(null),
        updatePhone: () => Promise.resolve(null),
        deletePhone: () => Promise.resolve(),
        searchPhones: () => Promise.resolve([]),
        getCalculatedExpiryDate: () => null
      }
    }
  }

  // Supabase client ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
  console.log('‚úÖ Supabase client ready, using real database')

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  const fetchPhones = async () => {
    loading.value = true
    error.value = null

    try {
      console.log('üîÑ Attempting to connect to Supabase...')

      const { data, error: fetchError } = await supabaseClient
        .from('phone_numbers')
        .select('*')
        .order('created_at', { ascending: false })

      if (fetchError) {
        console.error('‚ùå Supabase query error:', fetchError)
        throw fetchError
      }

      console.log('üìÑ Raw Supabase data:', data)

      // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á field names ‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÉ‡∏ä‡πâ field names ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
      phones.value = data || []
      console.log('‚úÖ Successfully loaded from Supabase:', phones.value.length, 'phones')

      if (data && data.length > 0) {
        console.log('üìÑ First record:', data[0])
        error.value = null
      } else {
        console.log('üìÑ No data in database - this is normal for a new setup')
        error.value = null // ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà error ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      }
    } catch (err) {
      console.error('‚ùå Supabase connection failed:', err.message)
      console.error('üìã Full error:', err)

      // ‡πÑ‡∏°‡πà fallback ‡πÑ‡∏õ mock data ‡πÅ‡∏•‡πâ‡∏ß - ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á error ‡∏à‡∏£‡∏¥‡∏á‡πÜ
      phones.value = []
      error.value = `‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: ${err.message}`

      // ‡πÅ‡∏ï‡πà‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô development ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ mock data
      if (process.dev) {
        console.log('üîÑ Development mode: falling back to mock data')
        phones.value = getMockData()
        error.value = `Development mode - using mock data: ${err.message}`
      }
    } finally {
      loading.value = false
    }
  }

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà
  const addPhone = async (phoneData) => {
    loading.value = true
    error.value = null

    try {
      console.log('üìù Adding phone with data:', phoneData)

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á
      const cleanData = {
        phone_number: phoneData.phone_number?.trim() || '',
        carrier: phoneData.carrier || 'AIS',
        category: phoneData.category?.trim() || null,
        promotion: phoneData.promotion?.trim() || null,
        promotion_start_date: phoneData.promotion_start_date || null,
        promotion_end_date: phoneData.promotion_end_date || null,
        sim_expiry_date: phoneData.sim_expiry_date || null,
        notes: phoneData.notes?.trim() || null,
        status: phoneData.status || 'active'
      }

      console.log('üöÄ Clean data for Supabase:', cleanData)

      const { data, error: insertError } = await supabaseClient
        .from('phone_numbers')
        .insert([cleanData])
        .select()

      if (insertError) {
        console.error('‚ùå Insert error:', insertError)
        throw insertError
      }

      console.log('‚úÖ Inserted data:', data)

      if (data && data.length > 0) {
        phones.value.unshift(data[0])
      }
      return data[0]
    } catch (err) {
      console.error('‚ùå Failed to add phone:', err)

      // Handle specific error types
      let userMessage = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'

      if (err.code === '22001') {
        userMessage = '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 20 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)'
      } else if (err.code === '23505') {
        userMessage = '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß'
      } else if (err.code === '23502') {
        userMessage = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô'
      } else if (err.message.includes('fetch')) {
        userMessage = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ'
      } else {
        userMessage = `${userMessage}: ${err.message}`
      }

      error.value = userMessage
      throw new Error(userMessage)
    } finally {
      loading.value = false
    }
  }

  // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ö‡∏≠‡∏£‡πå
  const updatePhone = async (id, updates) => {
    loading.value = true
    error.value = null

    try {
      console.log('üìù Updating phone:', id, updates)

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á
      const cleanUpdates = {
        phone_number: updates.phone_number?.trim() || '',
        carrier: updates.carrier || 'AIS',
        category: updates.category?.trim() || null,
        promotion: updates.promotion?.trim() || null,
        promotion_start_date: updates.promotion_start_date || null,
        promotion_end_date: updates.promotion_end_date || null,
        sim_expiry_date: updates.sim_expiry_date || null,
        notes: updates.notes?.trim() || null,
        status: updates.status || 'active'
      }

      console.log('üîÑ Clean update data for Supabase:', cleanUpdates)

      const { data, error: updateError } = await supabaseClient
        .from('phone_numbers')
        .update(cleanUpdates)
        .eq('id', id)
        .select()

      if (updateError) {
        console.error('‚ùå Update error:', updateError)
        throw updateError
      }

      console.log('‚úÖ Updated data:', data)

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô array
      const index = phones.value.findIndex(phone => phone.id === id)
      if (index !== -1 && data && data.length > 0) {
        phones.value[index] = data[0]
      }
      return data[0]
    } catch (err) {
      console.error('‚ùå Failed to update phone:', err)

      // Handle specific error types
      let userMessage = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'

      if (err.code === '22001') {
        userMessage = '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 20 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)'
      } else if (err.code === '23505') {
        userMessage = '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß'
      } else if (err.code === '23502') {
        userMessage = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô'
      } else if (err.message.includes('fetch')) {
        userMessage = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ'
      } else {
        userMessage = `${userMessage}: ${err.message}`
      }

      error.value = userMessage
      throw new Error(userMessage)
    } finally {
      loading.value = false
    }
  }

  // ‡∏•‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå
  const deletePhone = async (id) => {
    loading.value = true
    error.value = null

    try {
      console.log('üóëÔ∏è Deleting phone:', id)

      const { error: deleteError } = await supabaseClient
        .from('phone_numbers')
        .delete()
        .eq('id', id)

      if (deleteError) {
        console.error('‚ùå Delete error:', deleteError)
        throw deleteError
      }

      console.log('‚úÖ Phone deleted successfully')

      // ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å array
      phones.value = phones.value.filter(phone => phone.id !== id)
    } catch (err) {
      console.error('‚ùå Failed to delete phone:', err)
      error.value = `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ${err.message}`
      throw err
    } finally {
      loading.value = false
    }
  }

  // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå
  const searchPhones = async (query) => {
    loading.value = true
    error.value = null

    try {
      const { data, error: searchError } = await supabaseClient
        .from('phone_numbers')
        .select('*')
        .or(`phone_number.ilike.%${query}%,carrier.ilike.%${query}%`)
        .order('created_at', { ascending: false })

      if (searchError) throw searchError
      return data || []
    } catch (err) {
      error.value = err.message
      console.error('Search failed:', err)
      throw err
    } finally {
      loading.value = false
    }
  }

  // Helper function: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÇ‡∏õ‡∏£ (‡πÄ‡∏î‡∏¥‡∏°)
  const getCalculatedExpiryDate = (startDate) => {
    if (!startDate) return null
    const start = new Date(startDate)
    const expiry = new Date(start)
    expiry.setDate(start.getDate() + 30)
    return expiry.toISOString().split('T')[0]
  }

  return {
    phones: readonly(phones),
    loading: readonly(loading),
    error: readonly(error),
    fetchPhones,
    addPhone,
    updatePhone,
    deletePhone,
    searchPhones,
    getCalculatedExpiryDate
  }
}